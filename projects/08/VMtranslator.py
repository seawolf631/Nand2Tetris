import sys
import random
import os
#Necessary Parser and CodeWriter Methods
def commandType(currentLine):
    lineList = currentLine.split()
    if lineList[0]  == "return":
        return "C_RETURN"
    elif lineList[0] == "pop":
        return "C_POP"
    elif lineList[0] == "push":
        return "C_PUSH"
    elif lineList[0] == "label":
        return "C_LABEL"
    elif lineList[0] == "if-goto":
        return "C_IF"
    elif lineList[0] == "goto":
        return "C_GOTO"
    elif lineList[0] == "function":
        return "C_FUNCTION"
    elif lineList[0] == "call":
        return "C_CALL"
    elif len(lineList) == 1:
        return "C_ARITHMETIC"
def arg1(currentLine):
    firstSpace = currentLine.index(" ")
    secondSpace = currentLine[(firstSpace+1):].index(" ") + firstSpace + 1
    return currentLine[firstSpace+1: secondSpace]
def arg2(currentLine):
    firstSpace = currentLine.index(" ")
    secondSpace = currentLine[(firstSpace+1):].index(" ") + firstSpace + 1
    return currentLine[secondSpace+1:secondSpace+3]
def writeArithmetic(currentLine):
    lineList = currentLine.split()
    labelNum = str(100+(1000*random.randint(0,100)))
    labelNum2 = str(int(labelNum) + 1)
    if(lineList[0] == "add"):
        writeFile.write("//Adding\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("D=M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("A=M\n")
        writeFile.write("M=M+D\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "sub"):
        writeFile.write("//Subtracting\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("D=M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("A=M\n")
        writeFile.write("M=M-D\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "eq"):
        writeFile.write("//Equals\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("D=M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=M\n")
        writeFile.write("D=A-D\n")
        writeFile.write("@EQUAL" + str(labelNum)+ "\n")
        writeFile.write("D;JEQ\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=0\n")
        writeFile.write("@EQUAL" +str(labelNum2)+ "\n")
        writeFile.write("0;JMP\n")
        writeFile.write("(EQUAL" + str(labelNum)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=-1\n")
        writeFile.write("(EQUAL"+str(labelNum2)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "lt"):
        writeFile.write("//Less-Than\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("D=M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=M\n")
        writeFile.write("D=A-D\n")
        writeFile.write("@LESSTHAN" + str(labelNum)+ "\n")
        writeFile.write("D;JLT\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=0\n")
        writeFile.write("@LESSTHAN" +str(labelNum2)+ "\n")
        writeFile.write("0;JMP\n")
        writeFile.write("(LESSTHAN" + str(labelNum)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=-1\n")
        writeFile.write("(LESSTHAN"+str(labelNum2)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "gt"):
        writeFile.write("//Greather-Than\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("D=M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=M\n")
        writeFile.write("D=A-D\n")
        writeFile.write("@GREATERTHAN" + str(labelNum)+ "\n")
        writeFile.write("D;JGT\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=0\n")
        writeFile.write("@GREATERTHAN" +str(labelNum2)+ "\n")
        writeFile.write("0;JMP\n")
        writeFile.write("(GREATERTHAN" + str(labelNum)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=-1\n")
        writeFile.write("(GREATERTHAN"+str(labelNum2)+")\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "neg"):
        writeFile.write("//Negate\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("A=M\n")
        writeFile.write("M=-M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "or"):
        writeFile.write("//OR\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=A-1\n")
        writeFile.write("A=A-1\n")
        writeFile.write("D=M\n")
        writeFile.write("A=A+1\n")
        writeFile.write("D=D|M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("M=M-1\n")
        writeFile.write("A=M\n")
        writeFile.write("M=D\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
    elif(lineList[0] == "not"):
        writeFile.write("//NOT\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=A-1\n")
        writeFile.write("D=M\n")
        writeFile.write("D=!D\n")
        writeFile.write("M=D\n")
    elif(lineList[0] == "and"):
        writeFile.write("//AND\n")
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("A=A-1\n")
        writeFile.write("A=A-1\n")
        writeFile.write("D=M\n")
        writeFile.write("A=A+1\n")
        writeFile.write("D=D&M\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M-1\n")
        writeFile.write("M=M-1\n")
        writeFile.write("A=M\n")
        writeFile.write("M=D\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
def writePushPop(commandType, segment, index):
    if(commandType == "C_PUSH"):
        if(segment == "constant"):
            writeFile.write("//Pushing\n")
            writeFile.write("@"+index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "argument"):
            writeFile.write("//Pushing with Argument\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@ARG\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("A=D\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "local"):
            writeFile.write("//Pushing with Local\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@LCL\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("A=D\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "that"):
            writeFile.write("//Pushing with That\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@THAT\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("A=D\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "temp"):
            index = str(int(index) + 3)
            writeFile.write("//Pushing with Temp\n")
            writeFile.write("@" + index+ "\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "this"):
            writeFile.write("//Pushing with This\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@THIS\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("A=D\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "pointer"):
            index = str(int(index) + 3)
            writeFile.write("//Pushing with Pointer\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
        elif(segment == "static"):
            writeFile.write("//Pushing with Static\n")
            writeFile.write("@" + fileName[-8:periodIndex] + "." + index)
            writeFile.write("D=M\n")
            writeFile.write("@SP\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M+1\n")
    elif(commandType == "C_POP"):
        if(segment == "constant"):
            writeFile.write("//Popping with Constant\n")
            writeFile.write("@SP")
        elif(segment == "that"):
            writeFile.write("//Popping with That\n")
            writeFile.write("@" + index +"\n")
            writeFile.write("D=A\n")
            writeFile.write("@THAT\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("@THAT\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@THAT\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@THAT\n")
            writeFile.write("A=M\n")
            writeFile.write("D=A-D\n")
            writeFile.write("@THAT\n")
            writeFile.write("M=D\n")
        elif(segment == "this"):
            writeFile.write("//Popping with This\n")
            writeFile.write("@" + index +"\n")
            writeFile.write("D=A\n")
            writeFile.write("@THIS\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("@THIS\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@THIS\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@THIS\n")
            writeFile.write("A=M\n")
            writeFile.write("D=A-D\n")
            writeFile.write("@THIS\n")
            writeFile.write("M=D\n")
        elif(segment == "argument"):
            writeFile.write("//Popping with Argument\n")
            writeFile.write("@" + index +"\n")
            writeFile.write("D=A\n")
            writeFile.write("@ARG\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("@ARG\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@ARG\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@ARG\n")
            writeFile.write("A=M\n")
            writeFile.write("D=A-D\n")
            writeFile.write("@ARG\n")
            writeFile.write("M=D\n")
        elif(segment == "local"):
            writeFile.write("//Popping with Local\n")
            writeFile.write("@" + index +"\n")
            writeFile.write("D=A\n")
            writeFile.write("@LCL\n")
            writeFile.write("A=M\n")
            writeFile.write("D=D+A\n")
            writeFile.write("@LCL\n")
            writeFile.write("M=D\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@LCL\n")
            writeFile.write("A=M\n")
            writeFile.write("M=D\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("D=A\n")
            writeFile.write("@LCL\n")
            writeFile.write("A=M\n")
            writeFile.write("D=A-D\n")
            writeFile.write("@LCL\n")
            writeFile.write("M=D\n")
        elif(segment == "temp"):
            index = str(int(index) + 5)
            writeFile.write("//Popping with Temp\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("M=D\n")
        elif(segment == "pointer"):
            index = str(int(index) + 3)
            writeFile.write("//Popping with Pointer\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@" + index + "\n")
            writeFile.write("M=D\n")
        elif(segment == "static"):
            writeFile.write("//Popping with Static\n")
            writeFile.write("@SP\n")
            writeFile.write("M=M-1\n")
            writeFile.write("A=M\n")
            writeFile.write("D=M\n")
            writeFile.write("@" + fileName[-8:periodIndex] + "." + index)
            writeFile.write("M=D\n")
def writeLabel(label):
    writeFile.write("//Labeling\n")
    label = label.strip()
    if(" " in label):
        writeFile.write("(" + label[:label.index(" ")] + ")\n")
    else:
        writeFile.write("(" + label + ")\n")
def writeGoto(label):
    writeFile.write("//Writing GOTO\n")
    label = label.strip()
    writeFile.write("@" + label + "\n")
    writeFile.write("0;JMP\n")
def writeIf(label):
    writeFile.write("//Writing IF-GOTO\n")
    label = label.strip()
    writeFile.write("@SP\n")
    writeFile.write("M=M-1\n")
    writeFile.write("A=M\n")
    writeFile.write("D=M\n")
    writeFile.write("@" + label + "\n")
    writeFile.write("D;JNE\n")
def writeCall(functionName, numArgs):
    functionName = functionName.strip()
    randomNumber = str(1000*random.randint(101,1000))
    writeFile.write("//Writing Call\n")
    #writeFile.write("//push return-address\n")
    writeFile.write("@RETURNADDRESS" +randomNumber +"\n")
    writeFile.write("D=A\n")
    writeFile.write("@SP\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//push LCL\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M+1\n")
    writeFile.write("@LCL\n")
    writeFile.write("D=M\n")
    writeFile.write("@SP\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//push ARG\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M+1\n")
    writeFile.write("@ARG\n")
    writeFile.write("D=M\n")
    writeFile.write("@SP\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//push THIS\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M+1\n")
    writeFile.write("@THIS\n")
    writeFile.write("D=M\n")
    writeFile.write("@SP\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//push THAT\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M+1\n")
    writeFile.write("@THAT\n")
    writeFile.write("D=M\n")
    writeFile.write("@SP\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//ARG = SP-n-5\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M+1\n")
    writeFile.write("D=M\n")
    writeFile.write("@"+ numArgs + "\n")
    writeFile.write("D=D-A\n")
    writeFile.write("@5\n")
    writeFile.write("D=D-A\n")
    writeFile.write("@ARG\n")
    writeFile.write("M=D\n")
    #writeFile.write("//LCL = SP\n")
    writeFile.write("@SP\n")
    writeFile.write("D=M\n")
    writeFile.write("@LCL\n")
    writeFile.write("M=D\n")
    #writeFile.write("//goto f\n")
    writeFile.write("@" + functionName +  "\n")
    writeFile.write("0;JMP\n")
    #writeFile.write("//(return-address)\n")
    writeFile.write("(RETURNADDRESS"+randomNumber+")\n")

def writeReturn():
    writeFile.write("//Writing Return\n")
    #writeFile.write("//Frame = LCL\n")
    writeFile.write("@LCL\n")
    writeFile.write("D=M\n")
    writeFile.write("@frame\n")
    writeFile.write("M=D\n")
    #writeFile.write("//RET = *(FRAME-5)\n")
    writeFile.write("@frame\n")
    writeFile.write("D=M\n")
    writeFile.write("@5\n")
    writeFile.write("D=D-A\n")
    writeFile.write("A=D\n")
    writeFile.write("D=M\n")
    writeFile.write("@ret\n")
    writeFile.write("M=D\n")
    #writeFile.write("//*ARG = pop()\n")
    writeFile.write("@SP\n")
    writeFile.write("M=M-1\n")
    writeFile.write("A=M\n")
    writeFile.write("D=M\n")
    writeFile.write("@ARG\n")
    writeFile.write("A=M\n")
    writeFile.write("M=D\n")
    #writeFile.write("//SP = ARG + 1\n")
    writeFile.write("@ARG\n")
    writeFile.write("D=M+1\n")
    writeFile.write("@SP\n")
    writeFile.write("M=D\n")
    #writeFile.write("//THAT = *(FRAME-1)\n")
    writeFile.write("@frame\n")
    writeFile.write("D=M\n")
    writeFile.write("@1\n")
    writeFile.write("D=D-A\n")
    writeFile.write("A=D\n")
    writeFile.write("D=M\n")
    writeFile.write("@THAT\n")
    writeFile.write("M=D\n")
    #writeFile.write("//THIS = *(FRAME-2)\n")
    writeFile.write("@frame\n")
    writeFile.write("D=M\n")
    writeFile.write("@2\n")
    writeFile.write("D=D-A\n")
    writeFile.write("A=D\n")
    writeFile.write("D=M\n")
    writeFile.write("@THIS\n")
    writeFile.write("M=D\n")
    #writeFile.write("//ARG = *(FRAME-3)\n")
    writeFile.write("@frame\n")
    writeFile.write("D=M\n")
    writeFile.write("@3\n")
    writeFile.write("D=D-A\n")
    writeFile.write("A=D\n")
    writeFile.write("D=M\n")
    writeFile.write("@ARG\n")
    writeFile.write("M=D\n")
    #writeFile.write("//LCL = *(FRAME-4)\n")
    writeFile.write("@frame\n")
    writeFile.write("D=M\n")
    writeFile.write("@4\n")
    writeFile.write("D=D-A\n")
    writeFile.write("A=D\n")
    writeFile.write("D=M\n")
    writeFile.write("@LCL\n")
    writeFile.write("M=D\n")
    #writeFile.write("//goto RET\n")
    writeFile.write("@ret\n")
    writeFile.write("A=M\n")
    writeFile.write("0;JMP\n")
def writeFunction(functionName, numLocals):
    writeFile.write("//Writing Function\n")
    functionName = functionName.strip()
    writeFile.write("(" + functionName + ")\n")
    x = 0
    while(x < int(numLocals)):
        writeFile.write("@SP\n")
        writeFile.write("A=M\n")
        writeFile.write("M=0\n")
        writeFile.write("@SP\n")
        writeFile.write("M=M+1\n")
        x += 1
#Start of Reading and Writing File

for n in sys.argv[1:]:
    fileName = n
    readFile = open(fileName, 'r')
    periodIndex = fileName.index(".")
    firstBracket = fileName.index("/")
    secondBracket = fileName[firstBracket+1:].index("/") + firstBracket + 1
    writeFile = open(fileName[firstBracket+1:secondBracket] + ".asm", "a")

    #Writing BootStrap
    if(n == sys.argv[1]):
        writeFile.write("//Bootstrap\n")
        writeFile.write("@256\n")
        writeFile.write("D=A\n")
        writeFile.write("@SP\n")
        writeFile.write("M=D\n")
        writeCall("Sys.init","0")
    #Writing ASM from file
    for line in readFile:
        if line.strip() and (line[0:2] != "//"):
            print line
            currentCommand = commandType(line)
            if(currentCommand == "C_POP" or currentCommand == "C_PUSH"):
                currentArg1 = arg1(line)
                currentArg2 = arg2(line)
                writePushPop(currentCommand, currentArg1, currentArg2)
                print currentArg1,currentArg2
            elif(currentCommand == "C_LABEL"):
                labelArg = line[line.index(" ")+1:-1]
                writeLabel(labelArg)
                print labelArg
            elif(currentCommand == "C_IF"):
                ifArg = line[line.index(" ")+1:]
                writeIf(ifArg)
                print ifArg
            elif(currentCommand == "C_GOTO"):
                gotoArg = line[line.index(" ")+1:]
                writeGoto(gotoArg)
                print gotoArg
            elif(currentCommand == "C_FUNCTION"):
                firstFunctionSpace = line.index(" ")
                secondFunctionSpace = line[(firstFunctionSpace+1):].index(" ") + firstFunctionSpace + 1
                functionArg1 = line[line.index(" ")+1: secondFunctionSpace]
                functionArg2 = line[secondFunctionSpace + 1:]
                writeFunction(functionArg1, functionArg2)
                print functionArg1, functionArg2
            elif(currentCommand == "C_RETURN"):
                writeReturn()
            elif(currentCommand == "C_CALL"):
                firstCallSpace = line.index(" ")
                secondCallSpace = line[(firstCallSpace+1):].index(" ") + firstCallSpace + 1
                callArg1 = line[line.index(" ") +1: secondCallSpace]
                callArg2 = line[secondCallSpace+1:]
                writeCall(callArg1, callArg2)
                print callArg1, callArg2
            else:
                writeArithmetic(line)
                print currentCommand
    readFile.close()
    writeFile.close()

